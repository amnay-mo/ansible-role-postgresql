# file: tasks/configure-slaves.yml -- postgresql pre-start configuration of the slave servers and startup

- name: "Stage 3: stop old postgresql service"
  become: true
  become_user: root
  service: name="{{ postgresql_service_name }}" state=stopped
  when: postgresql_drop_old_cluster

- name: "Stage 3: remove old postgresql cluster"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  file: path="{{ postgresql_data_dir }}" state=absent
  when: postgresql_drop_old_cluster

- name: "Stage 3: cluster directory replacement with symlink, check destination directory"
  become: true
  become_user: root
  file:
    path: "{{ postgresql_cluster_symlink_src }}"
    state: directory
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0700
  when: postgresql_cluster_symlink_src|length > 0
  
- name: "Stage 3: cluster directory replacement with symlink, create symlink"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  file:
    src: "{{ postgresql_cluster_symlink_src }}"
    dest: "{{ postgresql_data_dir }}"
    state: link
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    force: yes
  when: postgresql_cluster_symlink_src|length > 0

- name: "Stage 3: write .pgpass for postgres user"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  shell: "echo '*:*:*:{{ postgresql_streaming_user.name }}:{{ postgresql_streaming_user.pass }}' > ~postgres/.pgpass"

- name: "Stage 3: change permissions on .pgpass"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  file:
    path: ~postgres/.pgpass
    state: file
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0600

- name: "Stage 3: check cluster directory"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  find: paths={{ postgresql_data_dir }} file_type=directory patterns="*"
  register: postgresql_data_empty

- name: "Stage 3: initialize new postgresql cluster"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  command: "pg_basebackup -c fast -X stream -h {{ postgresql_streaming_master }} -U {{ postgresql_streaming_user.name }} -D {{ postgresql_data_dir }}"
  when: postgresql_data_empty.matched|int == 0

- name: "Stage 3: configure pg_hba.conf"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0640

- name: "Stage 3: configure postgresql.conf"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  lineinfile:
    dest: "{{ postgresql_conf_dir }}/postgresql.conf"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.guc }}"
  with_items: "{{ postgresql_conf_default_guc }}"

- name: "Stage 3: configure recovery.conf"
  become: true
  become_user: "{{ postgresql_admin_user }}"
  template:
    src: recovery.conf.j2
    dest: "{{ postgresql_data_dir }}/recovery.conf"
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0640

- name: "Stage 3: create postgresql log directory"
  file:
    path: "{{ postgresql_log_directory }}"
    state: directory
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0755
  when: postgresql_log_directory is defined

- name: "Stage 3: start postgresql service"
  become: true
  become_user: root
  service: name="{{postgresql_service_name }}" state=restarted enabled=yes
